Q.1) Write a Java program to accept a number from user and generate multiplication table of a
number. Accept number using Buffered Reader class.

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class MultiplicationTable {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.print("Enter a number: ");
        int number = Integer.parseInt(reader.readLine());
        
        System.out.println("Multiplication Table for " + number + ":");
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " x " + i + " = " + (number * i));
        }
    }
}


 q2.
Write a Java Program to Reverse a Number. Accept number using command line arguments.
public class ReverseNumber {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Please provide a number as a command-line argument.");
            return;
        }

        try {
            int number = Integer.parseInt(args[0]);
            int reversed = 0;

            while (number != 0) {
                int digit = number % 10;
                reversed = reversed * 10 + digit;
                number /= 10;
            }

            System.out.println("Reversed Number: " + reversed);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input! Please enter a valid integer.");
        }
    }
}

q3.Write a Java program to print the sum of elements of the array. Also display array elements in
ascending order.

import java.util.Arrays;

public class ArrayOperations {
    public static void main(String[] args) {
        int[] array = {5, 2, 8, 1, 3}; // Example array

        int sum = 0;
        for (int num : array) {
            sum += num;
        }

        System.out.println("Sum of array elements: " + sum);

        Arrays.sort(array);
        System.out.println("Array elements in ascending order: " + Arrays.toString(array));
    }
}



q4.Write a Java program to print the factors of a given number. (Use Scanner class).
import java.util.Scanner;

public class Factors {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        System.out.println("Factors of " + number + ":");
        for (int i = 1; i <= number; i++) {
            if (number % i == 0) {
                System.out.print(i + " ");
            }
        }

        scanner.close();
    }
}

q5.Write a Java program to accept a number from user and print all prime numbers up to that
number (Use Buffered Reader class)

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class PrimeNumbers {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter a number: ");
        int num = Integer.parseInt(reader.readLine());

        System.out.println("Prime numbers up to " + num + ":");
        for (int i = 2; i <= num; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
    }

    private static boolean isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
}

Q6
Write a Java Program to Display Armstrong Numbers Between range. Accept range from
user.
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class ArmstrongNumbers {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.print("Enter the lower range: ");
        int lower = Integer.parseInt(reader.readLine());
        
        System.out.print("Enter the upper range: ");
        int upper = Integer.parseInt(reader.readLine());
        
        System.out.println("Armstrong numbers between " + lower + " and " + upper + ":");
        for (int i = lower; i <= upper; i++) {
            if (isArmstrong(i)) {
                System.out.print(i + " ");
            }
        }
    }

    private static boolean isArmstrong(int n) {
        int original = n, sum = 0, digits = String.valueOf(n).length();
        while (n > 0) {
            int digit = n % 10;
            sum += Math.pow(digit, digits);
            n /= 10;
        }
        return sum == original;
    }
}


Q7.Write java program to check whether number is Perfect or not.

import java.io.*;

public class PerfectNumber {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter a number: ");
        int num = Integer.parseInt(reader.readLine());
        int sum = 0;

        for (int i = 1; i <= num / 2; i++) 
            if (num % i == 0) sum += i;

        System.out.println(num + (sum == num ? " is a Perfect Number." : " is not a Perfect Number."));
    }
}


Q8.Define a class student having rollno, name and percentage. Define Default and parameterized
constructor. Accept the 5 student details and display it. (Use this keyword).

import java.util.Scanner;

class Student {
    private int rollNo; 
    private String name; 
    private double percentage;

    public Student() { this(0, "Unknown", 0.0); }

    public Student(int rollNo, String name, double percentage) { 
        this.rollNo = rollNo; 
        this.name = name; 
        this.percentage = percentage; 
    }

    public void acceptDetails() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Roll No: "); rollNo = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: "); name = sc.nextLine();
        System.out.print("Enter Percentage: "); percentage = sc.nextDouble();
    }

    public void displayDetails() {
        System.out.println("Roll No: " + rollNo + ", Name: " + name + ", Percentage: " + percentage + "%");
    }
}

public class StudentDetails {
    public static void main(String[] args) {
        Student[] students = new Student[5];
        for (int i = 0; i < 5; i++) { 
            System.out.println("Enter details for Student " + (i + 1) + ":");
            (students[i] = new Student()).acceptDetails(); 
        }
        System.out.println("\nStudent Details:");
        for (Student s : students) s.displayDetails();
    }
}


q9.
Write a Java program to display Fibonacci series using function.

import java.util.Scanner;

public class FibonacciSeries {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of terms: ");
        int terms = sc.nextInt();
        System.out.println("Fibonacci Series:");
        for (int i = 0; i < terms; i++) System.out.print(fibonacci(i) + " ");
    }

    public static int fibonacci(int n) {
        if (n <= 1) return n;
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}


q10.Q.28) Write a program that reads on file name from the user, then displays information about
whether the file exists, whether the file is readable, whether the file is writable and the type of file.

import java.io.File;
import java.util.Scanner;

public class FileInfo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the file name (with path): ");
        String fileName = sc.nextLine();

        File file = new File(fileName);

        if (file.exists()) {
            System.out.println("File exists: Yes");
            System.out.println("Readable: " + (file.canRead() ? "Yes" : "No"));
            System.out.println("Writable: " + (file.canWrite() ? "Yes" : "No"));
            System.out.println("File type: " + (file.isDirectory() ? "Directory" : "File"));
        } else {
            System.out.println("File exists: No");
        }
    }
}



q11.Write a java program to accept a number from the user, if number is zero then throw user
defined exception ―Number is 0, otherwise check whether no is prime or not.
import java.util.Scanner;

class ZeroException extends Exception {
    public ZeroException(String message) {
        super(message);
    }
}

public class PrimeCheck {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = sc.nextInt();

        try {
            if (num == 0) {
                throw new ZeroException("Number is 0");
            }
            if (isPrime(num)) {
                System.out.println(num + " is a prime number.");
            } else {
                System.out.println(num + " is not a prime number.");
            }
        } catch (ZeroException e) {
            System.out.println(e.getMessage());
        }
    }

    public static boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
}


q12.
Write a java program to count number of digits, spaces and characters from a file.
import java.io.*;

public class FileCharacterCount {
    public static void main(String[] args) {
        BufferedReader reader = null;
        int digitCount = 0, spaceCount = 0, charCount = 0;
        
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("Enter the file name (with path): ");
            String fileName = br.readLine();
            reader = new BufferedReader(new FileReader(fileName));
            
            int ch;
            while ((ch = reader.read()) != -1) {
                if (Character.isDigit(ch)) {
                    digitCount++;
                } else if (Character.isWhitespace(ch)) {
                    spaceCount++;
                } else if (Character.isLetter(ch)) {
                    charCount++;
                }
            }
            
            System.out.println("Digits: " + digitCount);
            System.out.println("Spaces: " + spaceCount);
            System.out.println("Characters (excluding spaces): " + charCount);
            
        } catch (IOException e) {
            System.out.println("Error reading the file: " + e.getMessage());
        } finally {
            try {
                if (reader != null) reader.close();
            } catch (IOException e) {
                System.out.println("Error closing the file: " + e.getMessage());
            }
        }
    }
}

Q.13) Create a Hash table containing Employee name and Salary. Display the details of the hash

import java.util.Hashtable;

public class EmployeeSalary {
    public static void main(String[] args) {
        Hashtable<String, Double> employeeSalary = new Hashtable<>();

        // Adding employee names and their corresponding salaries
        employeeSalary.put("Alice", 50000.0);
        employeeSalary.put("Bob", 60000.0);
        employeeSalary.put("Charlie", 55000.0);
        employeeSalary.put("David", 70000.0);
        employeeSalary.put("Eva", 65000.0);

        // Displaying the details of the hashtable
        System.out.println("Employee Name and Salary:");
        for (String name : employeeSalary.keySet()) {
            System.out.println("Name: " + name + ", Salary: " + employeeSalary.get(name));
        }
    }
}



q14.Write a program to accept ‘n’ integers from the user &amp; store them in an Array List collection.
Display the elements of Array List.

import java.util.ArrayList;
import java.util.Scanner;

public class ArrayListExample {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();
        
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        
        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            numbers.add(sc.nextInt());
        }
        
        System.out.println("ArrayList elements: " + numbers);
    }
}

q15.Write a java program to accept a number from user, if it zero then throw user defined Exception
“Number Is Zero”, otherwise calculate the sum of first and last digit of that number.(Use static keyword)

import java.util.Scanner;

class NumberIsZeroException extends Exception {
    public NumberIsZeroException(String message) {
        super(message);
    }
}

public class NumberProcessing {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        try {
            System.out.print("Enter a number: ");
            int number = sc.nextInt();
            if (number == 0) {
                throw new NumberIsZeroException("Number Is Zero");
            }
            int sum = calculateSumOfFirstAndLastDigit(number);
            System.out.println("Sum of first and last digit: " + sum);
        } catch (NumberIsZeroException e) {
            System.out.println(e.getMessage());
        }
    }

    public static int calculateSumOfFirstAndLastDigit(int number) {
        String numStr = String.valueOf(Math.abs(number));
        int firstDigit = Character.getNumericValue(numStr.charAt(0));
        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));
        return firstDigit + lastDigit;
    }
}


Q16.
Write a class Driver with attributeslicense_no, name, address and age. Initialize values
through the parameterized constructor. If age of Driver is less than 18 then user-defined exception
should be generated ―Age is below 18 years―

class AgeBelowEighteenException extends Exception {
    public AgeBelowEighteenException(String message) {
        super(message);
    }
}

class Driver {
    private String licenseNo;
    private String name;
    private String address;
    private int age;

    public Driver(String licenseNo, String name, String address, int age) throws AgeBelowEighteenException {
        if (age < 18) {
            throw new AgeBelowEighteenException("Age is below 18 years");
        }
        this.licenseNo = licenseNo;
        this.name = name;
        this.address = address;
        this.age = age;
    }

    public void displayDetails() {
        System.out.println("Driver Details:");
        System.out.println("License No: " + licenseNo);
        System.out.println("Name: " + name);
        System.out.println("Address: " + address);
        System.out.println("Age: " + age);
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            Driver driver = new Driver("DL12345", "John Doe", "123 Main St, Cityville", 17);
            driver.displayDetails();
        } catch (AgeBelowEighteenException e) {
            System.out.println(e.getMessage());
        }
    }
}

q18.
Write a Java program to print the sum of elements of the array. Also display array elements in
ascending order.

import java.util.Arrays;
import java.util.Scanner;

public class ArrayOperations {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the size of the array: ");
        int n = sc.nextInt();
        int[] array = new int[n];
        
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            array[i] = sc.nextInt();
        }
        
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        
        Arrays.sort(array);
        
        System.out.println("Sum of elements: " + sum);
        System.out.println("Array elements in ascending order: " + Arrays.toString(array));
    }
}




